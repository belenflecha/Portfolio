{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "93041082",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "**MBAN 1 | MACHINE LEARNING** <br>\n",
    "__Hult International Business School__ <br>\n",
    "\n",
    " - Prof. Chase Kusterer\n",
    " - Student: Maria Belen Flecha Carrascosa\n",
    " \n",
    " \n",
    "**Classification Model Development:** <br>\n",
    "The purpose of the following assignment is to build a model to predict y. This assignment encompasses feature engineering, model preparation, variable selection, and model development.. <br>\n",
    "\n",
    "    \n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9d57613",
   "metadata": {},
   "source": [
    "## Importing and Exploring the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "id": "2bbc1689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23</td>\n",
       "      <td>11.0</td>\n",
       "      <td>4</td>\n",
       "      <td>11.0</td>\n",
       "      <td>46</td>\n",
       "      <td>12.0</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>23</td>\n",
       "      <td>16.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>50</td>\n",
       "      <td>12.0</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>24</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>26</td>\n",
       "      <td>16.0</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3</td>\n",
       "      <td>12.0</td>\n",
       "      <td>33</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>32</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>26</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>24</td>\n",
       "      <td>12.0</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>26</td>\n",
       "      <td>13.0</td>\n",
       "      <td>7</td>\n",
       "      <td>11.0</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>26</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>44</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>26</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>24</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>26</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>32</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3912</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mage  meduc  monpre  npvis  fage  feduc  omaps  fmaps  cigs  drink  male  mwhte  mblck  moth  fwhte  fblck  foth  bwght\n",
       "0    23   11.0       4   11.0    46   12.0      8      9    13      4     0      0      0     1      0      1     0   3600\n",
       "1    23   16.0       3   10.0    50   12.0      3      8     1      1     1      0      1     0      0      1     0   3912\n",
       "2    24   16.0       1   12.0    26   16.0      6      9    21      4     0      0      0     1      0      0     1   3090\n",
       "3    25   14.0       3   12.0    33   12.0      9      9    12      7     1      0      1     0      0      1     0   3370\n",
       "4    25   12.0       2    8.0    32   12.0      9      9     4      3     0      0      1     0      0      1     0   3827\n",
       "5    26   12.0       1   10.0    24   12.0      8      9     6      8     1      0      0     1      0      0     1   2778\n",
       "6    26   13.0       7   11.0    42    NaN      9      9     2      4     1      0      1     0      1      0     0   3170\n",
       "7    26   11.0       1   12.0    44   12.0      9      9    10      4     1      0      1     0      0      1     0   3310\n",
       "8    26   16.0       2   10.0    24   16.0      9      9    11      4     1      0      1     0      0      1     0   3730\n",
       "9    26   12.0       1   12.0    32   12.0      9      9     6      0     1      0      1     0      0      1     0   3912"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importing libraries\n",
    "import pandas as pd # data science essentials\n",
    "import matplotlib.pyplot as plt # essential graphical output\n",
    "import seaborn as sns # enhanced graphical output\n",
    "import numpy as np # For numpy arrays\n",
    "import statsmodels.formula.api as smf # linear regression (statsmodels)\n",
    "from sklearn.linear_model import LinearRegression # linear regression\n",
    "from sklearn.model_selection import train_test_split # train/test split\n",
    "from sklearn.naive_bayes import GaussianNB #navy bayes model\n",
    "from sklearn.linear_model import LogisticRegression #logistic regression\n",
    "from sklearn.neighbors import KNeighborsClassifier # KNN for Regression\n",
    "from sklearn.preprocessing import StandardScaler # standard scaler\n",
    "from sklearn.tree import DecisionTreeClassifier # decision tree classifier\n",
    "from sklearn.metrics import classification_report #classification report essentials\n",
    "from sklearn.metrics import confusion_matrix # confusion matrix essentials\n",
    "from sklearn.metrics import accuracy_score # accuracy score essentials\n",
    "import sklearn.linear_model # linear models\n",
    "from sklearn.neighbors import KNeighborsRegressor # KNN for Regression\n",
    "from sklearn.preprocessing import StandardScaler # standard scaler\n",
    "from copy import deepcopy #to copy the value and keep the original data\n",
    "\n",
    "# setting pandas print options\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "\n",
    "\n",
    "# specifying file name\n",
    "file = '/Users/beluflecha/Desktop/birthweight_low.xlsx'\n",
    "\n",
    "\n",
    "# reading the file into Python\n",
    "birthweight = pd.read_excel(file,header=0)\n",
    "\n",
    "\n",
    "# outputting the first ten rows of the dataset\n",
    "birthweight.head(n = 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21998a6f",
   "metadata": {},
   "source": [
    "### Exploring the Data\n",
    "\n",
    "- Displaying the data types with .info()\n",
    "- Displaying the amount of features and observations with .shape()\n",
    "- Displaying the descriptive statistics of the dataset with .describe(\n",
    "- Checking for missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "776d7640",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 352 entries, 0 to 351\n",
      "Data columns (total 18 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   mage    352 non-null    int64  \n",
      " 1   meduc   349 non-null    float64\n",
      " 2   monpre  352 non-null    int64  \n",
      " 3   npvis   349 non-null    float64\n",
      " 4   fage    352 non-null    int64  \n",
      " 5   feduc   345 non-null    float64\n",
      " 6   omaps   352 non-null    int64  \n",
      " 7   fmaps   352 non-null    int64  \n",
      " 8   cigs    352 non-null    int64  \n",
      " 9   drink   352 non-null    int64  \n",
      " 10  male    352 non-null    int64  \n",
      " 11  mwhte   352 non-null    int64  \n",
      " 12  mblck   352 non-null    int64  \n",
      " 13  moth    352 non-null    int64  \n",
      " 14  fwhte   352 non-null    int64  \n",
      " 15  fblck   352 non-null    int64  \n",
      " 16  foth    352 non-null    int64  \n",
      " 17  bwght   352 non-null    int64  \n",
      "dtypes: float64(3), int64(15)\n",
      "memory usage: 49.6 KB\n"
     ]
    }
   ],
   "source": [
    "# Displaying the information about the\n",
    "#types of variables and the non \n",
    "#missing values\n",
    "\n",
    "birthweight.info(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "id": "c3a4fdc3",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Size of Original Dataset\n",
      "------------------------\n",
      "Observations: 352\n",
      "Features:     18\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# formatting and printing the dimensions\n",
    "# of the dataset\n",
    "\n",
    "print(f\"\"\"\n",
    "Size of Original Dataset\n",
    "------------------------\n",
    "Observations: {birthweight.shape[0]}\n",
    "Features:     {birthweight.shape[1]}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "eea96ed7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>352.00</td>\n",
       "      <td>349.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>349.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>345.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "      <td>352.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>38.93</td>\n",
       "      <td>13.54</td>\n",
       "      <td>2.02</td>\n",
       "      <td>13.53</td>\n",
       "      <td>40.60</td>\n",
       "      <td>13.58</td>\n",
       "      <td>7.95</td>\n",
       "      <td>8.88</td>\n",
       "      <td>10.76</td>\n",
       "      <td>5.53</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.27</td>\n",
       "      <td>3246.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.36</td>\n",
       "      <td>2.29</td>\n",
       "      <td>0.34</td>\n",
       "      <td>6.32</td>\n",
       "      <td>12.21</td>\n",
       "      <td>2.97</td>\n",
       "      <td>2.02</td>\n",
       "      <td>0.79</td>\n",
       "      <td>6.95</td>\n",
       "      <td>3.87</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.46</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0.45</td>\n",
       "      <td>757.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>21.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>697.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>32.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>31.75</td>\n",
       "      <td>12.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2867.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.00</td>\n",
       "      <td>13.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>39.00</td>\n",
       "      <td>14.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>11.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3349.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>45.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>47.25</td>\n",
       "      <td>16.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>3778.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>73.00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>42.00</td>\n",
       "      <td>72.00</td>\n",
       "      <td>19.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>32.00</td>\n",
       "      <td>21.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>4933.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mage   meduc  monpre   npvis    fage   feduc   omaps   fmaps    cigs   drink    male   mwhte   mblck    moth   fwhte   fblck    foth    bwght\n",
       "count  352.00  349.00  352.00  349.00  352.00  345.00  352.00  352.00  352.00  352.00  352.00  352.00  352.00  352.00  352.00  352.00  352.00   352.00\n",
       "mean    38.93   13.54    2.02   13.53   40.60   13.58    7.95    8.88   10.76    5.53    0.55    0.33    0.36    0.30    0.40    0.33    0.27  3246.09\n",
       "std     10.36    2.29    0.34    6.32   12.21    2.97    2.02    0.79    6.95    3.87    0.50    0.47    0.48    0.46    0.49    0.47    0.45   757.70\n",
       "min     21.00    0.00    1.00    2.00   19.00    0.00    1.00    5.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   697.00\n",
       "25%     32.00   12.00    2.00   10.00   31.75   12.00    8.00    9.00    5.00    3.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  2867.75\n",
       "50%     37.00   13.00    2.00   12.00   39.00   14.00    9.00    9.00   11.00    5.00    1.00    0.00    0.00    0.00    0.00    0.00    0.00  3349.00\n",
       "75%     45.00   16.00    2.00   16.00   47.25   16.00    9.00    9.00   16.00    8.00    1.00    1.00    1.00    1.00    1.00    1.00    1.00  3778.75\n",
       "max     73.00   18.00    7.00   42.00   72.00   19.00   10.00   10.00   32.00   21.00    1.00    1.00    1.00    1.00    1.00    1.00    1.00  4933.00"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Getting the descriptive statistics of the original dataset\n",
    "birthweight.describe().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "6363b3b9",
   "metadata": {
    "cell_style": "center",
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mage      0\n",
       "meduc     3\n",
       "monpre    0\n",
       "npvis     3\n",
       "fage      0\n",
       "feduc     7\n",
       "omaps     0\n",
       "fmaps     0\n",
       "cigs      0\n",
       "drink     0\n",
       "male      0\n",
       "mwhte     0\n",
       "mblck     0\n",
       "moth      0\n",
       "fwhte     0\n",
       "fblck     0\n",
       "foth      0\n",
       "bwght     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the dataset contains NA\n",
    "birthweight.isna().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeeb9577",
   "metadata": {
    "cell_style": "center"
   },
   "source": [
    "### Dealing with missing values\n",
    "\n",
    "Imputing the data: the missing values will be replace with the mean of the respective feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "d10ed8ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputing the missing values with the mean\n",
    "\n",
    "# Mother´s education\n",
    "fill = 13.43 #mean of meduc\n",
    "birthweight['meduc'] = birthweight['meduc'].fillna(fill)\n",
    "\n",
    "\n",
    "# Total number of prenatal visits\n",
    "fill = 13.41 #mean of npvis\n",
    "birthweight['npvis'] = birthweight['npvis'].fillna(fill)\n",
    "\n",
    "\n",
    "# Father´s education\n",
    "fill = 13.31 #mean of feduc\n",
    "birthweight['feduc'] = birthweight['feduc'].fillna(fill)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "5f310a09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making sure all missing values have been taken care of\n",
    "birthweight.isnull().any().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2af3ec4",
   "metadata": {},
   "source": [
    "### Subcategorizing \n",
    "\n",
    "\n",
    "Making sub categories for drinks and cigs variables to split the data regarding the amount of cigarettes and drinks women take during pregnancy. \n",
    "- For cigs: we will create 4 categories; non-smoker, light-smoker, mid-smoker and heavy smoker.\n",
    "- For drink: we will create other 4 categories; non-drinker, light-drinker, mid-drinker and heavy-drinker.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "cd02a996",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Categorizing the amount of cig smoke per day based on the descriptive statistics\n",
    "#- 0 = Non-smoker\n",
    "#- 0-5 = Light-smoker  (25quartile)\n",
    "#- 5-16 = Mid-Smoker  (75quartile)\n",
    "#- More than 16 = Heavy_Smoker\n",
    "\n",
    "#Creating a while loop to make the categories\n",
    "idx = 0\n",
    "cigs_bin = deepcopy(birthweight['cigs']) #copying the original value of cigs, \n",
    "                                         #changing and replacing the values in the new column not to modify the original data\n",
    "while idx < len(birthweight['cigs']):\n",
    "    var = birthweight['cigs'][idx]\n",
    "    if var == 0:\n",
    "        cigs_bin[idx] = 'non_smoker' #if the person doesn´t smoke it will be consider a non-smoker\n",
    "    elif var < 5:\n",
    "        cigs_bin[idx] = 'light_smoker' #if the person smoke less than 5 it will be consider a light smoker\n",
    "    elif var < 16:\n",
    "        cigs_bin[idx] = 'mid_smoker'  #if the person smoke more than 5 but less than 16 it will be consider a mid-smoker\n",
    "    else:\n",
    "        cigs_bin[idx] = 'heavy_smoker' #if the person smoke more than 16 it will be consider a heavy-smoker\n",
    "    idx += 1\n",
    "birthweight['cigs_bin'] = cigs_bin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "id": "676e4587",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Categorizing the amount of drinks per week based on the descriptive statistics\n",
    "#- 0 = Non-drinker\n",
    "#- 0-3 = Light-drinker (25quartile)\n",
    "#- 3-8 = Mid-Drinker (75quartile)\n",
    "#- More than 8 = Heavy_Drinker\n",
    "\n",
    "#Creating a while loop to make the categories\n",
    "idx = 0\n",
    "drink_bin = deepcopy(birthweight['drink']) #copying the original value of cigs, \n",
    "                                         #changing and replacing the values in the new column not to modify the original data\n",
    "while idx < len(birthweight['drink']):\n",
    "    var = birthweight['drink'][idx]\n",
    "    if var == 0:\n",
    "        drink_bin[idx] = 'non_drinker' #if the person doesn´t drink it will be consider a non-drinker\n",
    "    elif var < 3 :\n",
    "        drink_bin[idx] = 'light_drinker' #if the person drink less than 3 it will be consider a light-drinker\n",
    "    elif var < 8 :\n",
    "        drink_bin[idx] = 'mid_drinker' #if the person drinks more than 3 but less than 8 it will be consider a mid-drinker\n",
    "    else:\n",
    "        drink_bin[idx] = 'heavy_drinker' #if the person drink more than 8 it will be consider a heavy-drinker\n",
    "    idx += 1\n",
    "birthweight['drink_bin'] = drink_bin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "ef6d0c0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting the categorical variables (cigs and drinks) into dummy variables\n",
    "\n",
    "# Encoding the categorical variables -  one hot encoding categorical variables\n",
    "one_hot_cigs      = pd.get_dummies(birthweight['cigs_bin'])\n",
    "one_hot_drink     = pd.get_dummies(birthweight['drink_bin'])\n",
    "\n",
    "\n",
    "# Joining codings together\n",
    "birthweight = birthweight.join([one_hot_cigs,one_hot_drink ]) #the dummies will be include in the data without deleating the previous information\n",
    "\n",
    "# Saving new columns\n",
    "new_columns = birthweight.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "id": "7df21781",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    311\n",
      "1     41\n",
      "Name: non_smoker, dtype: int64\n",
      "0    316\n",
      "1     36\n",
      "Name: light_smoker, dtype: int64\n",
      "0    178\n",
      "1    174\n",
      "Name: mid_smoker, dtype: int64\n",
      "0    251\n",
      "1    101\n",
      "Name: heavy_smoker, dtype: int64\n",
      "0    305\n",
      "1     47\n",
      "Name: non_drinker, dtype: int64\n",
      "0    316\n",
      "1     36\n",
      "Name: light_drinker, dtype: int64\n",
      "0    185\n",
      "1    167\n",
      "Name: mid_drinker, dtype: int64\n",
      "0    250\n",
      "1    102\n",
      "Name: heavy_drinker, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Checking for the Basic Rule for Flag-Based Feature Engineering\n",
    "#Since we have only 352 observations we need at least 30 observations in each category\n",
    "\n",
    "categories = ['non_smoker', 'light_smoker', 'mid_smoker', 'heavy_smoker', \n",
    "             'non_drinker', 'light_drinker', 'mid_drinker', 'heavy_drinker']\n",
    "for variable in categories:\n",
    "    print(f'{birthweight[variable].value_counts()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "056415bd",
   "metadata": {},
   "source": [
    "### Analyzing the distributions\n",
    "\n",
    "Analyzing the distribution of the variables using histograms to see if there is skewness.\n",
    "If there is a log transformation will be computed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "3e5eae55",
   "metadata": {
    "cell_style": "center"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Log Distribution of Birthweight')"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Develop a histogram to analyze the distribution of the y-variable: birthweight\n",
    "sns.histplot(data  = birthweight,\n",
    "             x     = \"bwght\",\n",
    "             kde    = True) # kernel density estimation\n",
    "\n",
    "\n",
    "# title and axis labels\n",
    "plt.title(label   = \"Original Distribution of Birthweight\")\n",
    "plt.xlabel(xlabel = \"bwght\") # avoiding using dataset labels\n",
    "plt.ylabel(ylabel = \"Count\")\n",
    "\n",
    "\n",
    "# displaying the histogram\n",
    "plt.show()\n",
    "\n",
    "# Since we see some left skewness we are going to perform a log transformation \n",
    "\n",
    "#log transforming bwght and saving it to the dataset\n",
    "birthweight['log_bwght'] = np.log10(birthweight['bwght'])\n",
    "\n",
    "sns.displot(birthweight['log_bwght'])\n",
    "plt.title(label   = \"Log Distribution of Birthweight\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "id": "4cea4703",
   "metadata": {
    "cell_style": "center"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Log Distribution of Mother´s Age')"
      ]
     },
     "execution_count": 443,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Develop a histogram to analyze the distribution of the x-variable: mage\n",
    "sns.histplot(data  = birthweight,\n",
    "             x     = \"mage\",\n",
    "             kde    = True) # kernel density estimation\n",
    "\n",
    "\n",
    "# title and axis labels\n",
    "plt.title(label   = \"Original Distribution of Mother´s Age\")\n",
    "plt.xlabel(xlabel = \"mage\") # avoiding using dataset labels\n",
    "plt.ylabel(ylabel = \"Count\")\n",
    "\n",
    "\n",
    "# displaying the histogram\n",
    "plt.show()\n",
    "\n",
    "#We can see some right skewness \n",
    "\n",
    "#Converting Mother´s Age into log\n",
    "birthweight['log_mage'] = np.log10(birthweight['mage'])\n",
    "\n",
    "sns.displot(birthweight['log_mage'])\n",
    "plt.title(label   = \"Log Distribution of Mother´s Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "id": "1044316d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Log Distribution of Father´s Age')"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Develop a histogram to analyze the distribution of the x-variable: fage\n",
    "sns.histplot(data  = birthweight,\n",
    "             x     = \"fage\",\n",
    "             kde    = True) # kernel density estimation\n",
    "\n",
    "\n",
    "# title and axis labels\n",
    "plt.title(label   = \"Original Distribution of Father´s Age\")\n",
    "plt.xlabel(xlabel = \"fage\") # avoiding using dataset labels\n",
    "plt.ylabel(ylabel = \"Count\")\n",
    "\n",
    "\n",
    "# displaying the histogram\n",
    "plt.show()\n",
    "\n",
    "#Some right skewness is also present\n",
    "\n",
    "#Converting Father´s Age into log\n",
    "birthweight['log_fage'] = np.log10(birthweight['fage'])\n",
    "\n",
    "sns.displot(birthweight['log_fage'])\n",
    "plt.title(label   = \"Log Distribution of Father´s Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "03e7c942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Log Distribution of Total N° of Prenatal Visists')"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Develop a histogram to analyze the distribution of the x-variable: npvis\n",
    "sns.histplot(data  = birthweight,\n",
    "             x     = \"npvis\",\n",
    "             kde    = True) # kernel density estimation\n",
    "\n",
    "\n",
    "# title and axis labels\n",
    "plt.title(label   = \"Original Distribution of Total N° of Prenatal Visists\")\n",
    "plt.xlabel(xlabel = \"npvis\") # avoiding using dataset labels\n",
    "plt.ylabel(ylabel = \"Count\")\n",
    "\n",
    "\n",
    "# displaying the histogram\n",
    "plt.show()\n",
    "\n",
    "#We can see right skewness\n",
    "\n",
    "#Converting Father´s Age into log\n",
    "birthweight['log_npvis'] = np.log10(birthweight['npvis'])\n",
    "\n",
    "sns.displot(birthweight['log_npvis'])\n",
    "plt.title(label   = \"Log Distribution of Total N° of Prenatal Visists\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c723df70",
   "metadata": {},
   "source": [
    "### Correlation Analysis\n",
    "\n",
    "Seeing which are the explanatory variables that are more correlated with the y-variable: birthweight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "b9a62181",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log_bwght        1.00\n",
      "bwght            0.97\n",
      "fmaps            0.54\n",
      "omaps            0.51\n",
      "log_npvis        0.39\n",
      "npvis            0.31\n",
      "mid_smoker       0.30\n",
      "light_drinker    0.29\n",
      "mid_drinker      0.29\n",
      "feduc            0.26\n",
      "meduc            0.23\n",
      "light_smoker     0.19\n",
      "non_drinker      0.16\n",
      "non_smoker       0.12\n",
      "moth             0.12\n",
      "foth             0.08\n",
      "monpre           0.02\n",
      "mblck            0.02\n",
      "fblck           -0.00\n",
      "male            -0.02\n",
      "fwhte           -0.07\n",
      "mwhte           -0.14\n",
      "log_mage        -0.47\n",
      "mage            -0.49\n",
      "heavy_smoker    -0.55\n",
      "log_fage        -0.55\n",
      "cigs            -0.58\n",
      "fage            -0.62\n",
      "heavy_drinker   -0.64\n",
      "drink           -0.65\n",
      "Name: log_bwght, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# creating a (Pearson) correlation \n",
    "df_corr = birthweight.corr().round(2)\n",
    "\n",
    "\n",
    "# printing (Pearson) correlations with log_birthweight\n",
    "print(df_corr.loc['log_bwght'].sort_values(ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2be86729",
   "metadata": {},
   "source": [
    "<u>High Positive Corr with Y-Variable</u><br>\n",
    "- Five minute apgar score (fmaps)\n",
    "- One minute apgar score (omaps)\n",
    "- Total N° of Prenatal Visists (npvis)\n",
    "- Mid Smoker\n",
    "- Light Drinker\n",
    "\n",
    "<u>High Negative Corr with Y-Variable</u><br>\n",
    "- Mother´s age (mage)\n",
    "- Heavy Smoker\n",
    "- Father´s age (fage)\n",
    "- Heavy Drinker\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "568a0682",
   "metadata": {},
   "source": [
    "## Models Development\n",
    "\n",
    "Four different models will be created to see which one performs better to use in the future to predict birthweight. \n",
    "\n",
    "The models used are the followings:\n",
    "\n",
    "- OLS Regression (standard linear regression) <br>\n",
    "- Lasso Regression <br>\n",
    "- Bayesian Automatic Relevance Determination (ARD) <br>\n",
    "- K-Nearest Neighbors Regression (KNN)<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "074aeb79",
   "metadata": {},
   "source": [
    "### OLS Regression: Standard Linear Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "ec736522",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Data\n",
      "-------------\n",
      "X-side: (264, 30)\n",
      "y-side: (264,)\n",
      "\n",
      "\n",
      "Testing Data\n",
      "------------\n",
      "X-side: (88, 30)\n",
      "y-side: (88,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Preparing explanatory variable data\n",
    "birthweight_data   = birthweight.drop([ 'bwght','log_bwght' #dropping the y-variable, and it´s log from the list\n",
    "                                      ],axis = 1)     \n",
    "# preparing response variables\n",
    "birthweight_target = birthweight.loc[ : , 'log_bwght']\n",
    "\n",
    "# preparing training and testing sets (all letters are lowercase)\n",
    "x_train, x_test, y_train, y_test = train_test_split(    \n",
    "            birthweight_data,                                  # x data\n",
    "            birthweight_target,                                # y data\n",
    "            test_size = 0.25,                              #Size of training set\n",
    "            random_state = 219)                            #lock in random sequence\n",
    "\n",
    "\n",
    "# checking the shapes of the training/testing datasets\n",
    "print(f\"\"\"\n",
    "Training Data\n",
    "-------------\n",
    "X-side: {x_train.shape}\n",
    "y-side: {y_train.shape}\n",
    "\n",
    "\n",
    "Testing Data\n",
    "------------\n",
    "X-side: {x_test.shape}\n",
    "y-side: {y_test.shape}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "id": "513591e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mage +\n",
      "log_npvis +\n",
      "fage +\n",
      "light_smoker +\n",
      "mid_smoker +\n",
      "heavy_smoker +\n",
      "light_drinker +\n",
      "heavy_drinker +\n",
      "mwhte +\n"
     ]
    }
   ],
   "source": [
    "# Declaring set of x-variables used for our Regression\n",
    "# Deleating one of each dummy from the list: non-smoker, non-drinker, foth and moth\n",
    "# Variables ompaps and fmaps can´t be used since are scores taken after birth\n",
    "# The final x- variables used were related to the correlation with the y-variable\n",
    "\n",
    "x_variables = ['mage','log_npvis','fage','light_smoker','mid_smoker','heavy_smoker',\n",
    "    'light_drinker','heavy_drinker', 'mwhte']\n",
    "\n",
    "#looping to make x-variables suitable for statsmodels\n",
    "for val in x_variables:\n",
    "    print(f\"{val} +\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "560b6ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:              log_bwght   R-squared:                       0.688\n",
      "Model:                            OLS   Adj. R-squared:                  0.677\n",
      "Method:                 Least Squares   F-statistic:                     62.20\n",
      "Date:                Sun, 13 Mar 2022   Prob (F-statistic):           3.47e-59\n",
      "Time:                        15:09:59   Log-Likelihood:                 331.39\n",
      "No. Observations:                 264   AIC:                            -642.8\n",
      "Df Residuals:                     254   BIC:                            -607.0\n",
      "Df Model:                           9                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================\n",
      "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "Intercept         3.5803      0.037     97.003      0.000       3.508       3.653\n",
      "mage             -0.0013      0.001     -2.131      0.034      -0.002    -9.7e-05\n",
      "log_npvis         0.0931      0.024      3.914      0.000       0.046       0.140\n",
      "fage             -0.0032      0.001     -6.144      0.000      -0.004      -0.002\n",
      "light_smoker      0.0788      0.019      4.131      0.000       0.041       0.116\n",
      "mid_smoker        0.0415      0.014      2.877      0.004       0.013       0.070\n",
      "heavy_smoker     -0.0254      0.017     -1.494      0.136      -0.059       0.008\n",
      "light_drinker     0.0538      0.017      3.178      0.002       0.020       0.087\n",
      "heavy_drinker    -0.0905      0.012     -7.808      0.000      -0.113      -0.068\n",
      "mwhte            -0.0213      0.010     -2.218      0.027      -0.040      -0.002\n",
      "==============================================================================\n",
      "Omnibus:                       21.116   Durbin-Watson:                   2.051\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               54.319\n",
      "Skew:                          -0.311   Prob(JB):                     1.60e-12\n",
      "Kurtosis:                       5.134   Cond. No.                         566.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# merging X_train and y_train so that they can be used in statsmodels\n",
    "birthweight_train = pd.concat([x_train, y_train], axis = 1)\n",
    "\n",
    "\n",
    "# Step 1: Building the model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_bwght ~ mage +\n",
    "                                            log_npvis +\n",
    "                                            fage +\n",
    "                                            light_smoker +\n",
    "                                            mid_smoker +\n",
    "                                            heavy_smoker +\n",
    "                                            light_drinker +\n",
    "                                            heavy_drinker +\n",
    "                                            mwhte \"\"\",data = birthweight_train)\n",
    "\n",
    "\n",
    "# Step 2: Fiting the model based on the data\n",
    "results = lm_best.fit()\n",
    "\n",
    "\n",
    "# Step 3: Analyzing the summary output\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e04dbcc",
   "metadata": {},
   "source": [
    "**OLS Regression Results Analysis**\n",
    "\n",
    "The OLS Regression Results shows the predictor variables (mage, npvis, fage, \n",
    "light_smoker, mid_smoker, heavy_smoker, light_drinker, heavy_drinker and mwhte) \n",
    "are correlated with the response variable birthweight in a 68.8%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "id": "6e5742a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Applying modelin scikit-learn\n",
    "\n",
    "# Preparing x-variables from the OLS model\n",
    "ols_data = birthweight.loc[:, x_variables] \n",
    "\n",
    "\n",
    "# Preparing response variable\n",
    "birthweight_target = birthweight.loc [ : , 'log_bwght']\n",
    "\n",
    "\n",
    "###############################################\n",
    "## setting up more than one train-test split ##\n",
    "###############################################\n",
    "# FULL X-dataset (normal Y)\n",
    "x_train_FULL, x_test_FULL, y_train_FULL, y_test_FULL = train_test_split(\n",
    "            birthweight_data,     # x-variables\n",
    "            birthweight_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# OLS p-value x-dataset (normal Y)\n",
    "x_train_OLS, x_test_OLS, y_train_OLS, y_test_OLS = train_test_split(\n",
    "            ols_data,         # x-variables choosen\n",
    "            birthweight_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "id": "41281a2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OLS Training Score : 0.6879\n",
      "OLS Testing Score  : 0.6755\n",
      "OLS Train-Test Gap : 0.0124\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#Instantiating a model object\n",
    "lr = LinearRegression()\n",
    "\n",
    "\n",
    "# Fitting to the training data\n",
    "lr_fit = lr.fit(x_train_OLS, y_train_OLS)\n",
    "\n",
    "# Scoring the results\n",
    "print('OLS Training Score :', lr.score(x_train_OLS, y_train_OLS).round(4))  # using R-square\n",
    "print('OLS Testing Score  :',  lr.score(x_test_OLS, y_test_OLS).round(4)) # using R-square\n",
    "\n",
    "lr_train_score = lr.score(x_train_OLS , y_train_OLS).round(4)\n",
    "lr_test_score = lr.score(x_test_OLS , y_test_OLS).round(4)\n",
    "\n",
    "# displaying and saving the gap between training and testing\n",
    "print('OLS Train-Test Gap :', abs(lr_train_score - lr_test_score).round(4))\n",
    "lr_test_gap = abs(lr_train_score - lr_test_score).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fcc911d",
   "metadata": {},
   "source": [
    "The OLS Standard Linear Regression Model shows a Training Score of 0.6879 and a Testing Score of 0.6755, with a Train-Test Gap less than 0.05 (being 0.0124). \n",
    "Additional models will be performed to see if the scores can be improved."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17aaf4e8",
   "metadata": {},
   "source": [
    "### Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "17899c97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lasso Training Score : 0.5546\n",
      "Lasso Testing Score  : 0.5678\n",
      "Lasso Train-Test Gap : 0.0132\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Instantiating a model object\n",
    "lasso_model = sklearn.linear_model.Lasso(alpha = 0.01) # changin the alpha to 0.01\n",
    "\n",
    "\n",
    "# Fitting to the training data\n",
    "lasso_fit = lasso_model.fit(x_train_OLS, y_train_OLS) #We are going to use the data that we have previously used\n",
    "                                                      #for the OLS Model\n",
    "\n",
    "# Scoring the results\n",
    "print('Lasso Training Score :', lasso_model.score(x_train_OLS, y_train_OLS).round(4))\n",
    "print('Lasso Testing Score  :', lasso_model.score(x_test_OLS, y_test_OLS).round(4))\n",
    "\n",
    "\n",
    "# Saving scoring data \n",
    "lasso_train_score = lasso_model.score(x_train_OLS, y_train_OLS).round(4) # using R-square\n",
    "lasso_test_score  = lasso_model.score(x_test_OLS, y_test_OLS).round(4)   # using R-square\n",
    "\n",
    "\n",
    "# Displaying and saving the gap between training and testing\n",
    "print('Lasso Train-Test Gap :', abs(lasso_train_score - lasso_test_score).round(4))\n",
    "lasso_test_gap = abs(lasso_train_score - lasso_test_score).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb11739b",
   "metadata": {},
   "source": [
    "The Lasso Regression shows a Training Score of 0.5546 and a Testing Score of 0.5678, with a gap of 0.0132.\n",
    "This model looks to be worst than the OLS Model for predicting birthweight. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c527b04",
   "metadata": {},
   "source": [
    "### ARD: Bayesian Automatic Relevance Determination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "73122170",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Score: 0.5812\n",
      "Testing Score : 0.6273\n",
      "ARD Train-Test Gap : 0.0461\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/beluflecha/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_base.py:148: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2. Please leave the normalize parameter to its default value to silence this warning. The default behavior of this estimator is to not do any normalization. If normalization is needed please use sklearn.preprocessing.StandardScaler instead.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Instantiating a model object\n",
    "ard_model = sklearn.linear_model.ARDRegression(normalize  = False)\n",
    "\n",
    "\n",
    "# Fitting the training data\n",
    "ard_fit = ard_model.fit(x_train_OLS, y_train_OLS) #We are going to use the data that we have previously used\n",
    "                                                 #for the OLS Model\n",
    "\n",
    "# Scoring the results\n",
    "print('Training Score:', ard_model.score(x_train_OLS, y_train_OLS).round(4))\n",
    "print('Testing Score :',  ard_model.score(x_test_OLS, y_test_OLS).round(4))\n",
    "\n",
    "# Saving scoring data \n",
    "ard_train_score = ard_model.score(x_train_OLS, y_train_OLS).round(4)\n",
    "ard_test_score  = ard_model.score(x_test_OLS, y_test_OLS).round(4)\n",
    "\n",
    "\n",
    "# Displaying and saving the gap between training and testing\n",
    "print('ARD Train-Test Gap :', abs(ard_train_score - ard_test_score).round(4))\n",
    "ard_test_gap = abs(ard_train_score - ard_test_score).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec694787",
   "metadata": {},
   "source": [
    "The ARD Model shows a Training Score of 0.5812 and a Testing Score of 0.6273, with a gap of 0.0461.\n",
    "This model looks to be better than the Lasso one, but worst than the OLS Model for predicting birthweight. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02d56d03",
   "metadata": {},
   "source": [
    "### KNN: K-Nearest Neighbors Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "id": "b4d72c0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Training Score: 0.8129\n",
      "KNN Testing Score : 0.7854\n",
      "KNN Train-Test Gap: 0.0275\n"
     ]
    }
   ],
   "source": [
    "# Preparing explanatory variable data\n",
    "# For the KNN Model we will used all the log transformations in the x-variables\n",
    "x_var   = [\n",
    "    'log_mage',\n",
    "    'log_npvis',\n",
    "    'log_fage',\n",
    "    'light_smoker',\n",
    "    'mid_smoker',\n",
    "    'heavy_smoker',\n",
    "    'light_drinker',\n",
    "    'heavy_drinker',\n",
    "    'mwhte']\n",
    "\n",
    "# Preparing x-variables from the knn model\n",
    "knn_data = birthweight.loc[:, x_var]\n",
    "\n",
    "\n",
    "# Preparing response variables\n",
    "y_target = birthweight.loc[ : , 'log_bwght']\n",
    "\n",
    "\n",
    "###############################################\n",
    "## setting up more than one train-test split ##\n",
    "###############################################\n",
    "# FULL X-dataset (normal Y)\n",
    "x_train_FULL, x_test_FULL, y_train_FULL, y_test_FULL = train_test_split(\n",
    "            knn_data,     # x-variables\n",
    "            y_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# Preparing training and testings sets\n",
    "x_train_knn, x_test_knn, y_train_knn, y_test_knn = train_test_split(\n",
    "            knn_data,         # x-variables\n",
    "            y_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# Instantiating a KNN model object\n",
    "knn_reg = KNeighborsRegressor(algorithm = 'auto',\n",
    "                              n_neighbors = 6) \n",
    "\n",
    "# Fitting to the training data\n",
    "knn_fit = knn_reg.fit(x_train_knn, y_train_knn)\n",
    "\n",
    "\n",
    "# Scoring the results\n",
    "print('KNN Training Score:', knn_reg.score(x_train_knn, y_train_knn).round(4))\n",
    "print('KNN Testing Score :',  knn_reg.score(x_test_knn, y_test_knn).round(4))\n",
    "\n",
    "\n",
    "# Saving scoring data \n",
    "knn_reg_score_train = knn_reg.score(x_train_knn, y_train_knn).round(4)\n",
    "knn_reg_score_test  = knn_reg.score(x_test_knn, y_test_knn).round(4)\n",
    "\n",
    "\n",
    "# Displaying and saving the gap between training and testing\n",
    "print('KNN Train-Test Gap:', abs(knn_reg_score_train - knn_reg_score_test).round(4))\n",
    "knn_reg_test_gap = abs(knn_reg_score_train - knn_reg_score_test).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "788cd3cc",
   "metadata": {},
   "source": [
    "This last Model shows the best training and testing scores to predict birthweight. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "190fd10f",
   "metadata": {},
   "source": [
    "## Conclusions and Final Model Selection\n",
    "\n",
    "We can conclude that for predicting the birthweight the best model to use is the **K-Nearest Neighbors Regression** since it shows the greater Train and Test Scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "id": "ccc53b14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Comparing the results side by side of the four different models created:\n",
      "\n",
      "Model      Train Score      Test Score      Train-Test Gap\n",
      "-----      -----------      ----------      --------------\n",
      "OLS        0.6879           0.6755          0.0124\n",
      "Lasso      0.5546           0.5678          0.0132\n",
      "ARD        0.5812           0.6273          0.0461\n",
      "KNN        0.8129           0.7854          0.0275\n",
      "\n",
      "\n",
      "Final Model Selected: KNN\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print (\"\"\"Comparing the results side by side of the four different models created:\"\"\")\n",
    "\n",
    "print(f\"\"\"\n",
    "Model      Train Score      Test Score      Train-Test Gap\n",
    "-----      -----------      ----------      --------------\n",
    "OLS        {lr_train_score}           {lr_test_score}          {lr_test_gap}\n",
    "Lasso      {lasso_train_score}           {lasso_test_score}          {lasso_test_gap}\n",
    "ARD        {ard_train_score}           {ard_test_score}          {ard_test_gap}\n",
    "KNN        {knn_reg_score_train}           {knn_reg_score_test}          {knn_reg_test_gap}\n",
    "\n",
    "\n",
    "Final Model Selected: KNN\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b710f0a4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": "1",
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "302.390625px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "144px",
    "left": "963px",
    "right": "20px",
    "top": "120px",
    "width": "350px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
